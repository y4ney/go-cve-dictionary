package db

import (
	"os"
	"reflect"
	"testing"

	"github.com/y4ney/go-cve-dictionary/models"
)

func TestMain(m *testing.M) {
	code := m.Run()
	os.Exit(code)
}

func TestMatch(t *testing.T) {
	var testdata = []struct {
		name                     string
		uri                      string
		cpe                      models.CpeBase
		wantIsExactVerMatch      bool
		wantIsRoughVerMatch      bool
		wantIsVendorProductMatch bool
		wantErr                  bool
	}{
		{
			name: "true: exactMatch",
			uri:  "cpe:/a:oracle:vm_virtualbox:5.1.1",
			cpe: models.CpeBase{
				URI:                   "cpe:/a:oracle:vm_virtualbox",
				VersionStartIncluding: "5.1.0",
				VersionEndExcluding:   "5.1.32",
			},
			wantIsExactVerMatch:      true,
			wantIsRoughVerMatch:      false,
			wantIsVendorProductMatch: false,
		},
		{
			name: "false: exactMatch",
			uri:  "cpe:/a:oracle:vm_virtualbox:5.0.9",
			cpe: models.CpeBase{
				URI:                   "cpe:/a:oracle:vm_virtualbox",
				VersionStartIncluding: "5.1.0",
				VersionEndExcluding:   "5.1.32",
			},
			wantIsExactVerMatch:      false,
			wantIsRoughVerMatch:      false,
			wantIsVendorProductMatch: false,
		},
		{
			name: "true: exactMatch ver == start",
			uri:  "cpe:/a:oracle:vm_virtualbox:5.1.0",
			cpe: models.CpeBase{
				URI:                   "cpe:/a:oracle:vm_virtualbox",
				VersionStartIncluding: "5.1.0",
				VersionEndExcluding:   "5.1.32",
			},
			wantIsExactVerMatch:      true,
			wantIsRoughVerMatch:      false,
			wantIsVendorProductMatch: false,
		},
		{
			name: "false: exactMatch end < ver",
			uri:  "cpe:/a:oracle:vm_virtualbox:5.2.32",
			cpe: models.CpeBase{
				URI:                   "cpe:/a:oracle:vm_virtualbox",
				VersionStartIncluding: "5.1.0",
				VersionEndExcluding:   "5.1.32",
			},
			wantIsExactVerMatch:      false,
			wantIsRoughVerMatch:      false,
			wantIsVendorProductMatch: false,
		},
		{
			name: "true: exactMatch start < ver < end",
			uri:  "cpe:/a:oracle:vm_virtualbox:5.1.31",
			cpe: models.CpeBase{
				URI:                   "cpe:/a:oracle:vm_virtualbox",
				VersionStartIncluding: "5.1.0",
				VersionEndExcluding:   "5.1.32",
			},
			wantIsExactVerMatch:      true,
			wantIsRoughVerMatch:      false,
			wantIsVendorProductMatch: false,
		},
		{
			name: "true: exactMatch ver == ver",
			uri:  "cpe:/a:oracle:vm_virtualbox:5.1.31",
			cpe: models.CpeBase{
				URI: "cpe:/a:oracle:vm_virtualbox:5.1.31",
			},
			wantIsExactVerMatch:      true,
			wantIsRoughVerMatch:      false,
			wantIsVendorProductMatch: false,
		},
		{
			name: "true: VendorProductMatch",
			uri:  "cpe:/o:microsoft:windows_7",
			cpe: models.CpeBase{
				URI: "cpe:/o:microsoft:windows_7::sp1",
			},
			wantIsExactVerMatch:      false,
			wantIsRoughVerMatch:      false,
			wantIsVendorProductMatch: true,
		},
		{
			name: "true: VendorProductMatch-2",
			uri:  "cpe:/o:microsoft:windows_7::sp2",
			cpe: models.CpeBase{
				URI: "cpe:/o:microsoft:windows_7",
			},
			wantIsExactVerMatch:      false,
			wantIsRoughVerMatch:      false,
			wantIsVendorProductMatch: true,
		},
		{
			name: "true: VendorProductMatch-3",
			uri:  "cpe:/o:microsoft:windows_10",
			cpe: models.CpeBase{
				URI: "cpe:/o:microsoft:windows_10:-",
			},
			wantIsExactVerMatch:      false,
			wantIsRoughVerMatch:      false,
			wantIsVendorProductMatch: true,
		},
		{
			name: "false: no-semver, no-exact",
			uri:  "cpe:/a:cisco:ios:15.2%282%29eb",
			cpe: models.CpeBase{
				URI: "cpe:/a:cisco:ios:15.2%282%29ec",
			},
			wantIsExactVerMatch:      false,
			wantIsRoughVerMatch:      false,
			wantIsVendorProductMatch: false,
			wantErr:                  false,
		},
		{
			name: "no-semver, no-rpm cannot compare",
			uri:  "cpe:/o:vmware:esxi:7.0.0",
			cpe: models.CpeBase{
				URI:                   "cpe:/o:vmware:esxi",
				VersionStartIncluding: "7.0.0",
				VersionEndExcluding:   "esxi70u1c-17325551",
			},
			wantIsExactVerMatch:      false,
			wantIsRoughVerMatch:      false,
			wantIsVendorProductMatch: false,
			wantErr:                  false,
		},
		{
			name: "true: RoughMatch no semver format",
			uri:  "cpe:/a:openssl:openssl:1.1.1c",
			cpe: models.CpeBase{
				URI:                   "cpe:/a:openssl:openssl",
				VersionStartIncluding: "1.1.1",
				VersionEndExcluding:   "1.1.1l",
			},
			wantIsExactVerMatch:      false,
			wantIsRoughVerMatch:      true,
			wantIsVendorProductMatch: false,
		},
		{
			name: "false: no semver format",
			uri:  "cpe:/a:openssl:openssl:1.1.1n",
			cpe: models.CpeBase{
				URI:                   "cpe:/a:openssl:openssl",
				VersionStartIncluding: "1.1.1",
				VersionEndExcluding:   "1.1.1l",
			},
			wantIsExactVerMatch:      false,
			wantIsRoughVerMatch:      false,
			wantIsVendorProductMatch: false,
		},
		// targetSW
		{
			name: "targetSW: 1",
			uri:  "cpe:/a:apache:cordova:5.1.1::~~~iphone_os~~",
			cpe: models.CpeBase{
				URI: "cpe:/a:apache:cordova:5.1.1::~~~iphone_os~~",
			},
			wantIsExactVerMatch:      true,
			wantIsRoughVerMatch:      false,
			wantIsVendorProductMatch: false,
		},
		{
			name: "targetSW: 2",
			uri:  "cpe:/a:apache:cordova:5.1.1::~~~iphone_os~~",
			cpe: models.CpeBase{
				URI: "cpe:/a:apache:cordova:5.1.1::~~~android~~",
			},
			wantIsExactVerMatch:      false,
			wantIsRoughVerMatch:      false,
			wantIsVendorProductMatch: false,
		},
		{
			name: "targetSW: 2.1",
			uri:  "cpe:/a:apache:cordova:5.1.1::~~~iphone_os~~",
			cpe: models.CpeBase{
				URI: "cpe:/a:apache:cordova:5.1.2::~~~android~~",
			},
			wantIsExactVerMatch:      false,
			wantIsRoughVerMatch:      false,
			wantIsVendorProductMatch: false,
		},
		{
			name: "targetSW: 2.2",
			uri:  "cpe:/a:apache:cordova:5.1.1",
			cpe: models.CpeBase{
				URI: "cpe:/a:apache:cordova:5.1.2",
			},
			wantIsExactVerMatch:      false,
			wantIsRoughVerMatch:      false,
			wantIsVendorProductMatch: false,
		},
		{
			name: "targetSW: 2.3",
			uri:  "cpe:/a:apache:cordova:5.1.1",
			cpe: models.CpeBase{
				URI: "cpe:/a:apache:cordova:5.1.1",
			},
			wantIsExactVerMatch:      true,
			wantIsRoughVerMatch:      false,
			wantIsVendorProductMatch: false,
		},
		{
			name: "targetSW: 3",
			uri:  "cpe:/a:apache:cordova:5.1.1::~~~iphone_os~~",
			cpe: models.CpeBase{
				URI: "cpe:/a:apache:cordova:5.1.1",
			},
			wantIsExactVerMatch:      true,
			wantIsRoughVerMatch:      false,
			wantIsVendorProductMatch: false,
		},
		{
			name: "targetSW: 4",
			uri:  "cpe:/a:apache:cordova:::~~~iphone_os~~",
			cpe: models.CpeBase{
				URI: "cpe:/a:apache:cordova:5.1.1",
			},
			wantIsExactVerMatch:      false,
			wantIsRoughVerMatch:      false,
			wantIsVendorProductMatch: true,
		},
		{
			name: "targetSW: 5",
			uri:  "cpe:/a:apache:cordova:::~~~iphone_os~~",
			cpe: models.CpeBase{
				URI: "cpe:/a:apache:cordova:5.1.1::~~~android~~",
			},
			wantIsExactVerMatch:      false,
			wantIsRoughVerMatch:      false,
			wantIsVendorProductMatch: false,
		},
		{
			name: "targetSW: 6",
			uri:  "cpe:/a:apache:cordova:5.1.1::~~~iphone_os~~",
			cpe: models.CpeBase{
				URI:                   "cpe:/a:apache:cordova",
				VersionStartIncluding: "5.1.0",
				VersionEndExcluding:   "5.1.2",
			},
			wantIsExactVerMatch:      true,
			wantIsRoughVerMatch:      false,
			wantIsVendorProductMatch: false,
		},
		{
			name: "targetSW: 7",
			uri:  "cpe:/a:apache:cordova:5.1.1::~~~iphone_os~~",
			cpe: models.CpeBase{
				URI:                   "cpe:/a:apache:cordova:::~~~android~~",
				VersionStartIncluding: "5.1.0",
				VersionEndExcluding:   "5.1.2",
			},
			wantIsExactVerMatch:      false,
			wantIsRoughVerMatch:      false,
			wantIsVendorProductMatch: false,
		},
		{
			name: "true: semver match and clear version then check superset or subset",
			uri:  "cpe:/a:rubyonrails:rails:3.0.1",
			cpe: models.CpeBase{
				URI:                 "cpe:/a:rubyonrails:rails::-",
				VersionEndIncluding: "4.0.1",
			},
			wantIsExactVerMatch:      true,
			wantIsRoughVerMatch:      false,
			wantIsVendorProductMatch: false,
		},
		{
			name: "true: NA should match all version",
			uri:  "cpe:/h:fortinet:fortigate-100d:v6.2.9",
			cpe: models.CpeBase{
				URI: "cpe:/h:fortinet:fortigate-100d:-",
			},
			wantIsExactVerMatch:      true,
			wantIsRoughVerMatch:      false,
			wantIsVendorProductMatch: false,
		},
		{
			name: "true: NA should match all version",
			uri:  "cpe:/h:fortinet:fortigate-100d:v6.2.9",
			cpe: models.CpeBase{
				URI: "cpe:/h:fortinet:fortigate-100d:v6.2.9:-",
			},
			wantIsExactVerMatch:      true,
			wantIsRoughVerMatch:      false,
			wantIsVendorProductMatch: false,
		},
	}

	for _, tt := range testdata {
		gotIsExactVerMatch, gotIsRoughVerMatch, gotIsVendorProductMatch, err := match(tt.uri, tt.cpe)
		if (err != nil) != tt.wantErr {
			t.Errorf("match():%s error = %v, wantErr %v", tt.name, err, tt.wantErr)
			return
		}
		if gotIsExactVerMatch != tt.wantIsExactVerMatch {
			t.Errorf("match():%s gotIsExactVerMatch = %v, want %v", tt.name, gotIsExactVerMatch, tt.wantIsExactVerMatch)
		}
		if gotIsRoughVerMatch != tt.wantIsRoughVerMatch {
			t.Errorf("match():%s gotIsRoughVerMatch = %v, want %v", tt.name, gotIsRoughVerMatch, tt.wantIsRoughVerMatch)
		}
		if gotIsVendorProductMatch != tt.wantIsVendorProductMatch {
			t.Errorf("match():%s gotIsVendorProductMatch = %v, want %v", tt.name, gotIsVendorProductMatch, tt.wantIsVendorProductMatch)
		}
	}
}

func Test_matchCpe(t *testing.T) {
	nvdRangeCpe := models.NvdCpe{
		NvdID: 1,
		CpeBase: models.CpeBase{
			URI: "cpe:/o:qualcomm:qcs605_firmware",
			CpeWFN: models.CpeWFN{
				Part:    "o",
				Vendor:  "qualcomm",
				Product: "qcs605_firmware",
			},
			VersionStartIncluding: "0.0.1",
			VersionEndIncluding:   "2.0.0",
		},
	}
	nvdRangeNoSemver := models.NvdCpe{
		NvdID: 1,
		CpeBase: models.CpeBase{
			URI: "cpe:/a:openssl:openssl",
			CpeWFN: models.CpeWFN{
				Part:    "a",
				Vendor:  "openssl",
				Product: "openssl",
			},
			VersionStartIncluding: "1.1.1a",
			VersionEndIncluding:   "1.1.1c",
		},
	}
	jvnCpe := models.JvnCpe{
		JvnID: 1,
		CpeBase: models.CpeBase{
			URI: "cpe:/o:qualcomm:qcs605_firmware",
			CpeWFN: models.CpeWFN{
				Part:    "o",
				Vendor:  "qualcomm",
				Product: "qcs605_firmware",
			},
		},
	}
	type args struct {
		uri string
		cve *models.CveDetail
	}
	tests := []struct {
		name    string
		args    args
		nvdWant bool
		jvnWant bool
		wantErr bool
	}{
		{
			name: "nvd range match semver",
			args: args{
				uri: "cpe:/o:qualcomm:qcs605_firmware:1.0.0",
				cve: &models.CveDetail{
					Nvds: []models.Nvd{{
						Cpes: []models.NvdCpe{nvdRangeCpe}},
					},
				},
			},
			nvdWant: true,
			wantErr: false,
		},
		{
			name: "nvd range not match semver",
			args: args{
				uri: "cpe:/o:qualcomm:qcs605_firmware:3.0.0",
				cve: &models.CveDetail{
					Nvds: []models.Nvd{{
						Cpes: []models.NvdCpe{nvdRangeCpe}},
					},
				},
			},
			nvdWant: false,
			wantErr: false,
		},
		{
			name: "nvd range match non-semver",
			args: args{
				uri: "cpe:/a:openssl:openssl:1.1.1b",
				cve: &models.CveDetail{
					Nvds: []models.Nvd{{
						Cpes: []models.NvdCpe{nvdRangeNoSemver}},
					},
				},
			},
			nvdWant: true,
			wantErr: false,
		},
		{
			name: "nvd range not match non-semver",
			args: args{
				uri: "cpe:/a:openssl:openssl:1.1.1l",
				cve: &models.CveDetail{
					Nvds: []models.Nvd{{
						Cpes: []models.NvdCpe{nvdRangeNoSemver}},
					},
				},
			},
			nvdWant: false,
			wantErr: false,
		},
		{
			name: "jvn match",
			args: args{
				uri: "cpe:/o:qualcomm:qcs605_firmware:1.0.0",
				cve: &models.CveDetail{
					Jvns: []models.Jvn{{
						Cpes: []models.JvnCpe{jvnCpe}},
					},
				},
			},
			jvnWant: true,
			wantErr: false,
		},
		{
			name: "NVD has priority over JVN",
			args: args{
				uri: "cpe:/o:qualcomm:qcs605_firmware:3.0.0",
				cve: &models.CveDetail{
					Nvds: []models.Nvd{{
						Cpes: []models.NvdCpe{nvdRangeCpe}},
					},
					Jvns: []models.Jvn{{
						Cpes: []models.JvnCpe{jvnCpe}},
					},
				},
			},
			nvdWant: false,
			jvnWant: false,
			wantErr: false,
		},
		{
			name: "NVD has priority over JVN",
			args: args{
				uri: "cpe:/o:qualcomm:qcs605_firmware:1.0.0",
				cve: &models.CveDetail{
					Nvds: []models.Nvd{{
						Cpes: []models.NvdCpe{nvdRangeCpe}},
					},
					Jvns: []models.Jvn{{
						Cpes: []models.JvnCpe{jvnCpe}},
					},
				},
			},
			nvdWant: true,
			jvnWant: false,
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			nvdGot, jvnGot, err := matchCpe(tt.args.uri, tt.args.cve)
			if (err != nil) != tt.wantErr {
				t.Errorf("%s error = %v, wantErr %v", tt.name, err, tt.wantErr)
				return
			}
			if nvdGot != tt.nvdWant {
				t.Errorf("%s matchCpe() nvd = %v, want %v", tt.name, nvdGot, tt.nvdWant)
			}
			if jvnGot != tt.jvnWant {
				t.Errorf("%s matchCpe() jvn = %v, want %v", tt.name, jvnGot, tt.jvnWant)
			}
		})
	}
}

func Test_filterCveDetailByCpeURI1(t *testing.T) {
	type args struct {
		uri string
		cve *models.CveDetail
	}
	tests := []struct {
		name     string
		args     args
		expected *models.CveDetail
	}{
		{
			args: args{
				uri: "cpe:/o:vendor:product:1.0.0",
				cve: nil,
			},
			expected: nil,
		},
		{
			name: "NvdExactVersionMatch",
			args: args{
				uri: "cpe:/o:vendor:product:1.0.0",
				cve: &models.CveDetail{
					Nvds: []models.Nvd{
						{
							Cpes: []models.NvdCpe{
								{CpeBase: models.CpeBase{URI: "cpe:/o:vendor:product:1.0.0"}},
								{CpeBase: models.CpeBase{URI: "cpe:/o:vendor:product:1.0.1"}},
							},
						},
						{
							Cpes: []models.NvdCpe{
								{CpeBase: models.CpeBase{URI: "cpe:/o:vendor:product:1.0.1"}},
							},
						},
					},
					Jvns: []models.Jvn{
						{
							Cpes: []models.JvnCpe{
								{CpeBase: models.CpeBase{URI: "cpe:/o:vendor:product"}},
							},
						},
					},
				},
			},
			expected: &models.CveDetail{
				Nvds: []models.Nvd{
					{
						Cpes: []models.NvdCpe{
							{CpeBase: models.CpeBase{URI: "cpe:/o:vendor:product:1.0.0"}},
							{CpeBase: models.CpeBase{URI: "cpe:/o:vendor:product:1.0.1"}},
						},
						DetectionMethod: models.NvdExactVersionMatch,
					},
				},
				Jvns: []models.Jvn{},
			},
		},
		{
			name: "NvdVendorProductMatch",
			args: args{
				uri: "cpe:/o:vendor:product",
				cve: &models.CveDetail{
					Nvds: []models.Nvd{
						{
							Cpes: []models.NvdCpe{
								{CpeBase: models.CpeBase{URI: "cpe:/o:vendor:product:1.0.0"}},
								{CpeBase: models.CpeBase{URI: "cpe:/o:vendor:product:1.0.1"}},
							},
						},
					},
					Jvns: []models.Jvn{
						{
							Cpes: []models.JvnCpe{
								{CpeBase: models.CpeBase{URI: "cpe:/o:vendor:product"}},
							},
						},
						{
							Cpes: []models.JvnCpe{
								{CpeBase: models.CpeBase{URI: "cpe:/o:vendor:product2"}},
							},
						},
					},
				},
			},
			expected: &models.CveDetail{
				Nvds: []models.Nvd{
					{
						Cpes: []models.NvdCpe{
							{CpeBase: models.CpeBase{URI: "cpe:/o:vendor:product:1.0.0"}},
							{CpeBase: models.CpeBase{URI: "cpe:/o:vendor:product:1.0.1"}},
						},
						DetectionMethod: models.NvdVendorProductMatch,
					},
				},
				Jvns: []models.Jvn{},
			},
		},
		{
			name: "NvdVendorProductMatch",
			args: args{
				uri: "cpe:/a:vendor:product",
				cve: &models.CveDetail{
					Nvds: []models.Nvd{
						{
							Cpes: []models.NvdCpe{
								{CpeBase: models.CpeBase{URI: "cpe:/a:vendor:product", VersionEndExcluding: "1.0.0"}},
							},
						},
					},
				},
			},
			expected: &models.CveDetail{
				Nvds: []models.Nvd{
					{
						Cpes: []models.NvdCpe{
							{CpeBase: models.CpeBase{URI: "cpe:/a:vendor:product", VersionEndExcluding: "1.0.0"}},
						},
						DetectionMethod: models.NvdVendorProductMatch,
					},
				},
				Jvns: []models.Jvn{},
			},
		},
		{
			args: args{
				uri: "cpe:/o:vmware:esxi:7.0:-",
				cve: &models.CveDetail{
					Nvds: []models.Nvd{
						{
							Cpes: []models.NvdCpe{
								{CpeBase: models.CpeBase{
									URI:                   "cpe:/o:vmware:esxi",
									VersionStartIncluding: "7.0.0",
									VersionEndExcluding:   "esxi70u1c-17325551",
								}},
							},
						},
					},
					Jvns: []models.Jvn{},
				},
			},
			expected: &models.CveDetail{
				Nvds: []models.Nvd{},
				Jvns: []models.Jvn{},
			},
		},
		{

			name: "NvdRoughVersionMatch",
			args: args{
				uri: "cpe:/o:vendor:product:1.0.0c",
				cve: &models.CveDetail{
					Nvds: []models.Nvd{{Cpes: []models.NvdCpe{{CpeBase: models.CpeBase{URI: "cpe:/o:vendor:product", VersionStartIncluding: "1.0.0", VersionEndExcluding: "1.0.0n"}}}}},
				},
			},
			expected: &models.CveDetail{
				Nvds: []models.Nvd{
					{
						Cpes:            []models.NvdCpe{{CpeBase: models.CpeBase{URI: "cpe:/o:vendor:product", VersionStartIncluding: "1.0.0", VersionEndExcluding: "1.0.0n"}}},
						DetectionMethod: models.NvdRoughVersionMatch,
					},
				},
				Jvns: []models.Jvn{},
			},
		},
		{

			name: "NvdRoughVersionMatch false",
			args: args{
				uri: "cpe:/o:vendor:product:1.1.0c",
				cve: &models.CveDetail{
					Nvds: []models.Nvd{{Cpes: []models.NvdCpe{{CpeBase: models.CpeBase{URI: "cpe:/o:vendor:product", VersionStartIncluding: "1.0.0", VersionEndExcluding: "1.0.0n"}}}}},
				},
			},
			expected: &models.CveDetail{
				Nvds: []models.Nvd{},
				Jvns: []models.Jvn{},
			},
		},
		{

			name: "NvdExactMatch semver true",
			args: args{
				uri: "cpe:/o:vendor:product:1.0.3",
				cve: &models.CveDetail{
					Nvds: []models.Nvd{{Cpes: []models.NvdCpe{{CpeBase: models.CpeBase{URI: "cpe:/o:vendor:product", VersionStartIncluding: "1.0.0", VersionEndExcluding: "1.0.10"}}}}},
				},
			},
			expected: &models.CveDetail{
				Nvds: []models.Nvd{
					{
						Cpes:            []models.NvdCpe{{CpeBase: models.CpeBase{URI: "cpe:/o:vendor:product", VersionStartIncluding: "1.0.0", VersionEndExcluding: "1.0.10"}}},
						DetectionMethod: models.NvdExactVersionMatch,
					},
				},
				Jvns: []models.Jvn{},
			},
		},
		{

			name: "NvdExactMatch semver false",
			args: args{
				uri: "cpe:/o:vendor:product:2.0.0",
				cve: &models.CveDetail{
					Nvds: []models.Nvd{{Cpes: []models.NvdCpe{{CpeBase: models.CpeBase{URI: "cpe:/o:vendor:product", VersionStartIncluding: "1.0.0", VersionEndExcluding: "1.0.10"}}}}},
				},
			},
			expected: &models.CveDetail{
				Nvds: []models.Nvd{},
				Jvns: []models.Jvn{},
			},
		},
		{

			name: "If both are defined in NVD and JVN",
			args: args{
				uri: "cpe:/a:apache:tomcat:7.0.27",
				cve: &models.CveDetail{
					Nvds: []models.Nvd{{Cpes: []models.NvdCpe{{CpeBase: models.CpeBase{URI: "cpe:/a:apache:tomcat:4.0.0"}}}}},
					Jvns: []models.Jvn{{Cpes: []models.JvnCpe{{CpeBase: models.CpeBase{URI: "cpe:/a:apache:tomcat"}}}}},
				},
			},
			expected: &models.CveDetail{
				Nvds: []models.Nvd{},
				Jvns: []models.Jvn{},
			},
		},
	}

	for i, tt := range tests {
		_ = filterCveDetailByCpeURI(tt.args.uri, tt.args.cve)
		if !reflect.DeepEqual(tt.args.cve, tt.expected) {
			t.Errorf("[%d] %s expected: %#v, actual: %#v", i, tt.name, tt.expected, tt.args.cve)
		}
	}
}

func Test_makeVersionConstraint(t *testing.T) {
	type args struct {
		dict models.CpeBase
	}
	tests := []struct {
		name    string
		args    args
		want    string
		wantErr bool
	}{
		{
			name: "single <",
			args: args{
				dict: models.CpeBase{
					CpeWFN: models.CpeWFN{
						Part:    "a",
						Vendor:  "cisco",
						Product: "node-jose",
					},
					VersionEndExcluding: "0.11.0",
				},
			},
			want:    "< 0.11.0",
			wantErr: false,
		},
		{
			name: "single <=",
			args: args{
				dict: models.CpeBase{
					CpeWFN: models.CpeWFN{
						Part:    "a",
						Vendor:  "cisco",
						Product: "node-jose",
					},
					VersionEndIncluding: "0.11.0",
				},
			},
			want:    "<= 0.11.0",
			wantErr: false,
		},
		{
			name: "> and <=",
			args: args{
				dict: models.CpeBase{
					CpeWFN: models.CpeWFN{
						Part:    "a",
						Vendor:  "cisco",
						Product: "node-jose",
					},
					VersionStartExcluding: "0.10.0",
					VersionEndIncluding:   "0.11.0",
				},
			},
			want:    "> 0.10.0, <= 0.11.0",
			wantErr: false,
		},
		{
			name: ">= and <",
			args: args{
				dict: models.CpeBase{
					CpeWFN: models.CpeWFN{
						Part:    "a",
						Vendor:  "cisco",
						Product: "node-jose",
					},
					VersionStartIncluding: "0.10.0",
					VersionEndExcluding:   "0.11.0",
				},
			},
			want:    ">= 0.10.0, < 0.11.0",
			wantErr: false,
		},
		{
			name: "version not specified",
			args: args{
				dict: models.CpeBase{
					CpeWFN: models.CpeWFN{
						Part:    "a",
						Vendor:  "cisco",
						Product: "node-jose",
					},
				},
			},
			want:    "",
			wantErr: false,
		},
		{
			name: "err if VersionStartIncluding is not a semver style",
			args: args{
				dict: models.CpeBase{
					VersionStartIncluding: "1.1.1l",
				},
			},
			wantErr: true,
		},
		{
			name: "err if VersionStartExcluding is not a semver style",
			args: args{
				dict: models.CpeBase{
					VersionStartExcluding: "1.1.1l",
				},
			},
			wantErr: true,
		},
		{
			name: "err if VersionEndIncluding is not a semver style",
			args: args{
				dict: models.CpeBase{
					VersionEndIncluding: "1.1.1l",
				},
			},
			wantErr: true,
		},
		{
			name: "err if VersionEndExcluding is not a semver style",
			args: args{
				dict: models.CpeBase{
					VersionEndExcluding: "1.1.1l",
				},
			},
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := makeVersionConstraint(tt.args.dict)
			if (err != nil) != tt.wantErr {
				t.Errorf("makeVersionConstraint() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("makeVersionConstraint() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_matchSemver(t *testing.T) {
	type args struct {
		specifiedVer string
		cpeInNvd     models.CpeBase
	}
	tests := []struct {
		name    string
		args    args
		wantOk  bool
		wantErr bool
	}{
		{
			name: "empty string return false, nil",
			args: args{
				specifiedVer: "1.1.1",
				cpeInNvd: models.CpeBase{
					VersionStartExcluding: "",
					VersionStartIncluding: "",
					VersionEndExcluding:   "",
					VersionEndIncluding:   "",
				},
			},
			wantOk:  false,
			wantErr: false,
		},
		{
			name: "return err if range is not a semver style",
			args: args{
				specifiedVer: "1.1.1",
				cpeInNvd: models.CpeBase{
					VersionStartExcluding: "1.1.1l",
					VersionStartIncluding: "",
					VersionEndExcluding:   "",
					VersionEndIncluding:   "",
				},
			},
			wantOk:  false,
			wantErr: true,
		},
		{
			name: "< specified",
			args: args{
				specifiedVer: "1.1.1",
				cpeInNvd: models.CpeBase{
					VersionStartExcluding: "1.1.2",
					VersionStartIncluding: "",
					VersionEndExcluding:   "",
					VersionEndIncluding:   "",
				},
			},
			wantOk:  false,
			wantErr: false,
		},
		{
			name: "< specified",
			args: args{
				specifiedVer: "1.1.1",
				cpeInNvd: models.CpeBase{
					VersionStartExcluding: "1.1.1",
					VersionStartIncluding: "",
					VersionEndExcluding:   "",
					VersionEndIncluding:   "",
				},
			},
			wantOk:  false,
			wantErr: false,
		},
		{
			name: "<= specified",
			args: args{
				specifiedVer: "1.1.1",
				cpeInNvd: models.CpeBase{
					VersionStartExcluding: "",
					VersionStartIncluding: "1.1.1",
					VersionEndExcluding:   "",
					VersionEndIncluding:   "",
				},
			},
			wantOk:  true,
			wantErr: false,
		},
		{
			name: "specified <",
			args: args{
				specifiedVer: "1.1.1",
				cpeInNvd: models.CpeBase{
					VersionStartExcluding: "",
					VersionStartIncluding: "",
					VersionEndExcluding:   "1.1.1",
					VersionEndIncluding:   "",
				},
			},
			wantOk:  false,
			wantErr: false,
		},
		{
			name: "specified <=",
			args: args{
				specifiedVer: "1.1.1",
				cpeInNvd: models.CpeBase{
					VersionStartExcluding: "",
					VersionStartIncluding: "",
					VersionEndExcluding:   "",
					VersionEndIncluding:   "1.1.1",
				},
			},
			wantOk:  true,
			wantErr: false,
		},
		{
			name: "specified <=",
			args: args{
				specifiedVer: "1.1.1",
				cpeInNvd: models.CpeBase{
					VersionStartExcluding: "",
					VersionStartIncluding: "1.1.0",
					VersionEndExcluding:   "",
					VersionEndIncluding:   "1.1.2",
				},
			},
			wantOk:  true,
			wantErr: false,
		},
		{
			name: "err if range in nvd is not a semver style",
			args: args{
				specifiedVer: "1.1.1",
				cpeInNvd: models.CpeBase{
					VersionStartExcluding: "",
					VersionStartIncluding: "1.1.0l",
					VersionEndExcluding:   "",
					VersionEndIncluding:   "1.1.2",
				},
			},
			wantOk:  false,
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotOk, err := matchSemver(tt.args.specifiedVer, tt.args.cpeInNvd)
			if (err != nil) != tt.wantErr {
				t.Errorf("matchSemver() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if gotOk != tt.wantOk {
				t.Errorf("matchSemver() = %v, want %v", gotOk, tt.wantOk)
			}
		})
	}
}

func Test_matchRpmVer(t *testing.T) {
	type args struct {
		specifiedVer string
		cpeInNvd     models.CpeBase
	}
	tests := []struct {
		name string
		args args
		want bool
	}{
		// VersionStartIncluding
		{
			name: "specified == VersionStartIncluding",
			args: args{
				specifiedVer: "1.1.1a",
				cpeInNvd: models.CpeBase{
					VersionStartIncluding: "1.1.1a",
				},
			},
			want: true,
		},
		{
			name: "VersionStartIncluding < specified",
			args: args{
				specifiedVer: "1.1.1a",
				cpeInNvd: models.CpeBase{
					VersionStartIncluding: "1.1.0a",
				},
			},
			want: true,
		},
		{
			name: "VersionStartIncluding > specified",
			args: args{
				specifiedVer: "1.1.1a",
				cpeInNvd: models.CpeBase{
					VersionStartIncluding: "1.1.1b",
				},
			},
			want: false,
		},
		// VersionStartExcluding
		{
			name: "specified == VersionStartExcluding",
			args: args{
				specifiedVer: "1.1.1a",
				cpeInNvd: models.CpeBase{
					VersionStartExcluding: "1.1.1a",
				},
			},
			want: false,
		},
		{
			name: "VersionStartExcluding < specified",
			args: args{
				specifiedVer: "1.1.1a",
				cpeInNvd: models.CpeBase{
					VersionStartExcluding: "1.1.0z",
				},
			},
			want: true,
		},
		{
			name: "VersionStartExcluding > specified",
			args: args{
				specifiedVer: "1.1.1a",
				cpeInNvd: models.CpeBase{
					VersionStartExcluding: "1.1.1b",
				},
			},
			want: false,
		},
		// VersionEndIncluding
		{
			name: "specified == VersionEndIncluding",
			args: args{
				specifiedVer: "1.1.1a",
				cpeInNvd: models.CpeBase{
					VersionEndIncluding: "1.1.1a",
				},
			},
			want: true,
		},
		{
			name: "VersionEndIncluding < specified",
			args: args{
				specifiedVer: "1.1.1a",
				cpeInNvd: models.CpeBase{
					VersionEndIncluding: "1.1.0z",
				},
			},
			want: false,
		},
		{
			name: "VersionEndIncluding > specified",
			args: args{
				specifiedVer: "1.1.1a",
				cpeInNvd: models.CpeBase{
					VersionEndIncluding: "1.1.1b",
				},
			},
			want: true,
		},
		// VersionEndExcluding
		{
			name: "specified == VersionEndExcluding",
			args: args{
				specifiedVer: "1.1.1a",
				cpeInNvd: models.CpeBase{
					VersionEndExcluding: "1.1.1a",
				},
			},
			want: false,
		},
		{
			name: "VersionEndExcluding < specified",
			args: args{
				specifiedVer: "1.1.1a",
				cpeInNvd: models.CpeBase{
					VersionEndExcluding: "1.1.0z",
				},
			},
			want: false,
		},
		{
			name: "VersionEndExcluding> specified",
			args: args{
				specifiedVer: "1.1.1a",
				cpeInNvd: models.CpeBase{
					VersionEndExcluding: "1.1.1b",
				},
			},
			want: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := matchRpmVer(tt.args.specifiedVer, tt.args.cpeInNvd); got != tt.want {
				t.Errorf("matchRpmVer() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_isCpeURIAlsoDefinedInNvd(t *testing.T) {
	type args struct {
		cpeURI string
		nvds   []models.Nvd
	}
	tests := []struct {
		name string
		args args
		want bool
	}{
		{
			name: "not defined",
			args: args{
				cpeURI: "cpe:/a:apache:tomcat:7.0.27",
				nvds: []models.Nvd{
					{Cpes: []models.NvdCpe{{CpeBase: models.CpeBase{URI: "cpe:/a:vendor:product:7.0.27"}}}},
				},
			},
			want: false,
		},
		{
			name: "not defined",
			args: args{
				cpeURI: "cpe:/a:apache:tomcat:7.0.27",
				nvds: []models.Nvd{
					{Cpes: []models.NvdCpe{{CpeBase: models.CpeBase{URI: "cpe:/a:apache:tomcat:4.0.0"}}}},
				},
			},
			want: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := isCpeURIAlsoDefinedInNvd(tt.args.cpeURI, tt.args.nvds); got != tt.want {
				t.Errorf("isCpeURIAlsoDefinedInNvd() = %v, want %v", got, tt.want)
			}
		})
	}
}
