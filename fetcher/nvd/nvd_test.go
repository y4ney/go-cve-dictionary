package nvd

import (
	"reflect"
	"testing"
	"time"

	c "github.com/y4ney/go-cve-dictionary/config"
	"github.com/y4ney/go-cve-dictionary/models"
)

func TestMakeNvdMetaURL(t *testing.T) {
	var tests = []struct {
		year int
		url  []string
	}{
		{
			year: 2018,
			url:  []string{"https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2018.meta"},
		},
		{
			year: c.Latest,
			url: []string{
				"https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-modified.meta",
				"https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-recent.meta",
			},
		},
	}

	for i, tt := range tests {
		url := makeNvdMetaURLs(tt.year)
		if !reflect.DeepEqual(url, tt.url) {
			t.Errorf("[%d] expected: %v\n  actual: %v\n", i, tt.url, url)
		}
	}
}

func TestDistributeCvesByYear(t *testing.T) {
	type args struct {
		uniqMap map[string]map[string]models.Nvd
		cves    map[string]models.Nvd
	}
	var tests = []struct {
		in       args
		expected map[string]map[string]models.Nvd
	}{
		{
			in: args{
				uniqMap: map[string]map[string]models.Nvd{},
				cves: map[string]models.Nvd{
					"CVE-2021-0001": {CveID: "CVE-2021-0001"},
					"CVE-2020-0001": {CveID: "CVE-2020-0001"},
				},
			},
			expected: map[string]map[string]models.Nvd{
				"2020": {
					"CVE-2020-0001": {CveID: "CVE-2020-0001"},
				},
				"2021": {
					"CVE-2021-0001": {CveID: "CVE-2021-0001"},
				},
			},
		},
		{
			in: args{
				uniqMap: map[string]map[string]models.Nvd{
					"2021": {
						"CVE-2021-0001": {CveID: "CVE-2021-0001", LastModifiedDate: time.Date(2021, time.September, 3, 0, 0, 0, 0, time.UTC)},
					},
				},
				cves: map[string]models.Nvd{
					"CVE-2021-0001": {CveID: "CVE-2021-0001", LastModifiedDate: time.Date(2021, time.September, 4, 0, 0, 0, 0, time.UTC)},
				},
			},
			expected: map[string]map[string]models.Nvd{
				"2021": {
					"CVE-2021-0001": {CveID: "CVE-2021-0001", LastModifiedDate: time.Date(2021, time.September, 4, 0, 0, 0, 0, time.UTC)},
				},
			},
		},
	}

	for i, tt := range tests {
		distributeCvesByYear(tt.in.uniqMap, tt.in.cves)
		if !reflect.DeepEqual(tt.in.uniqMap, tt.expected) {
			t.Errorf("[%d] expected: %v\n  actual: %v\n", i, tt.expected, tt.in.uniqMap)
		}
	}
}
