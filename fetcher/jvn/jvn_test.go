package jvn

import (
	"reflect"
	"testing"
	"time"

	"github.com/y4ney/go-cve-dictionary/models"
)

func TestDistributeCvesByYear(t *testing.T) {
	type args struct {
		uniqMap map[string]map[string]models.Jvn
		cves    map[string]models.Jvn
	}
	var tests = []struct {
		in       args
		expected map[string]map[string]models.Jvn
	}{
		{
			in: args{
				uniqMap: map[string]map[string]models.Jvn{},
				cves: map[string]models.Jvn{
					"JVNDB-2021-0001#CVE-2021-0001": {JvnID: "JVNDB-2021-0001", CveID: "CVE-2021-0001"},
					"JVNDB-2021-0001#CVE-2020-0001": {JvnID: "JVNDB-2021-0001", CveID: "CVE-2020-0001"},
					"JVNDB-2020-0001#CVE-2020-0001": {JvnID: "JVNDB-2020-0001", CveID: "CVE-2020-0001"},
				},
			},
			expected: map[string]map[string]models.Jvn{
				"2020": {
					"JVNDB-2020-0001#CVE-2020-0001": {JvnID: "JVNDB-2020-0001", CveID: "CVE-2020-0001"},
				},
				"2021": {
					"JVNDB-2021-0001#CVE-2021-0001": {JvnID: "JVNDB-2021-0001", CveID: "CVE-2021-0001"},
					"JVNDB-2021-0001#CVE-2020-0001": {JvnID: "JVNDB-2021-0001", CveID: "CVE-2020-0001"},
				},
			},
		},
		{
			in: args{
				uniqMap: map[string]map[string]models.Jvn{
					"2021": {
						"JVNDB-2021-0001#CVE-2021-0001": {JvnID: "JVNDB-2021-0001", CveID: "CVE-2021-0001", LastModifiedDate: time.Date(2021, time.September, 3, 0, 0, 0, 0, time.UTC)},
					},
				},
				cves: map[string]models.Jvn{
					"JVNDB-2021-0001#CVE-2021-0001": {JvnID: "JVNDB-2021-0001", CveID: "CVE-2021-0001", LastModifiedDate: time.Date(2021, time.September, 4, 0, 0, 0, 0, time.UTC)},
				},
			},
			expected: map[string]map[string]models.Jvn{
				"2021": {
					"JVNDB-2021-0001#CVE-2021-0001": {JvnID: "JVNDB-2021-0001", CveID: "CVE-2021-0001", LastModifiedDate: time.Date(2021, time.September, 4, 0, 0, 0, 0, time.UTC)},
				},
			},
		},
	}

	for i, tt := range tests {
		distributeCvesByYear(tt.in.uniqMap, tt.in.cves)
		if !reflect.DeepEqual(tt.in.uniqMap, tt.expected) {
			t.Errorf("[%d] expected: %v\n  actual: %v\n", i, tt.expected, tt.in.uniqMap)
		}
	}
}

func TestGetCveIDs(t *testing.T) {
	var tests = []struct {
		in       Item
		expected []string
	}{
		{
			in: Item{
				Identifier: "success",
				References: []references{{
					Source: "NVD",
					ID:     "CVE-0000-0001",
				}},
			},
			expected: []string{"CVE-0000-0001"},
		},
		{
			in: Item{
				Identifier: "extra space",
				References: []references{{
					Source: "NVD",
					ID:     "CVE-0000-0002 ",
				}},
			},
			expected: []string{"CVE-0000-0002"},
		},
		{
			in: Item{
				Identifier: "invalid CVE-ID",
				References: []references{{
					Source: "NVD",
					ID:     "CCVE-0000-0003",
				}},
			},
			expected: []string{},
		},
	}

	for i, tt := range tests {
		if got := getCveIDs(tt.in); !reflect.DeepEqual(got, tt.expected) {
			t.Errorf("[%d] expected: %v\n  actual: %v\n", i, tt.expected, got)
		}
	}
}
